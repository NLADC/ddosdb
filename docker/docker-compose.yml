services:

  mongodb:
    image: mongo
    container_name: ddosdb_mongo
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ddosdb_mongodb:/data/db
    networks:
      - ddosdb
    expose:
      - 27017
    restart: unless-stopped

#
#  Uncomment the section below if - for some reason - you
#  want to be able to view the contents of the MongoDB.
#
#  mongo-express:
#    image: mongo-express
#    container_name: ddosdb_mongo_express
#    environment:
#      - ME_CONFIG_MONGODB_SERVER=mongodb
#    env_file:
#      - ./temp/environment.prod
#    networks:
#      - ddosdb
#    ports:
#      - 127.0.0.1:8081:8081
#    depends_on:
#      - mongodb
#    restart: unless-stopped
#
  db:
    image: postgres:13-alpine
    container_name: ddosdb_db
    volumes:
      - ddosdb_postgres:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=ddosdb
      - POSTGRES_PASSWORD=ddosdb
      - POSTGRES_DB=ddosdb
    networks:
      - ddosdb
    expose:
      - 5432
    restart: unless-stopped

  ddosdb:
    container_name: ddosdb_ddosdb
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: ddosdb/ddosdb
    command: sh -c  "python manage.py collectstatic --no-input && "\
                    "python manage.py migrate && "\
                    "python manage.py createsuperuser --noinput || true &&"\
                    "python manage.py initsync && "\
                    "python manage.py initgroups && "\
                    "gunicorn website.wsgi:application --bind 0.0.0.0:8000"
    env_file:
      - ./temp/environment.prod
    volumes:
      - ddosdb_static:/home/ddosdb/ddosdb-static/
      - ddosdb_data:/home/ddosdb/ddosdb-data/
    networks:
      - ddosdb
    expose:
     - 8000
    depends_on:
      - db
      - mongodb
    restart: unless-stopped

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    container_name: ddosdb_nginx
    volumes:
      - ddosdb_static:/home/ddosdb/ddosdb-static/
      - ddosdb_data:/home/ddosdb/ddosdb-data/
      - ddosdb_letsencrypt:/etc/letsencrypt/
      - ddosdb_nginx_etc:/etc/nginx/conf.d/
    networks:
      - ddosdb
    ports:
      - 80:80
      - 443:443
    depends_on:
      - ddosdb
    restart: unless-stopped


#
# If you don't need to synchronize fingerprints between DDoSDB instances
# Then you can comment everything below this up to the 'volumes' section.
# i.e.: rabbitmq, celery_worker and celery_beat containers
# They are only used for that purpose: a regular check on whether
# there are fingerprints to share (and instances to share it with)
# and doing actual checks on fingerprints to share if so.
#
# Alternatively startup everything *but* rabbitmq and celery_* by doing:
# docker-compose up -d nginx
#
  # Specific version of rabbitmq, later one (3.9) causes issues
  rabbitmq:
    container_name: ddosdb_rabbitmq
#    image: rabbitmq:3.8.19
    image: rabbitmq:3.13.6-alpine
    expose:
      - 5672
    networks:
      - ddosdb
    restart: unless-stopped

  celery_worker:
    container_name: ddosdb_celery_worker
    image: ddosdb/ddosdb
    command: sh -c  "./wait-for ddosdb:8000 -t 300 &&"\
                    "./wait-for rabbitmq:5672 -t 300 &&"\
                    "celery -A ddosdb worker -l info"
    env_file:
      - ./temp/environment.prod
    networks:
      - ddosdb
    restart: unless-stopped

  celery_beat:
    container_name: ddosdb_celery_beat
    image: ddosdb/ddosdb
    command: sh -c  "./wait-for ddosdb:8000 -t 300 &&"\
                    "./wait-for rabbitmq:5672 -t 300 &&"\
                    "celery -A ddosdb beat -l info"
    env_file:
      - ./temp/environment.prod
    networks:
      - ddosdb
    restart: unless-stopped

volumes:
  ddosdb_mongodb:
  ddosdb_postgres:
  ddosdb_static:
  ddosdb_data:
  ddosdb_letsencrypt:
  ddosdb_nginx_etc:

networks:
  ddosdb: